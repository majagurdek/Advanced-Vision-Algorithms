{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNxgv6l7AXaaY3ix4QCTKOz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/majagurdek/Advanced-Vision-Algorithms/blob/main/HOG%2CSVM\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YFZGAZ2N30yW",
        "outputId": "a3d1e9c4-926e-455d-dba8-098f6b984bf0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import scipy.ndimage\n",
        "import math\n",
        "import cv2\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import svm\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from google.colab.patches import cv2_imshow"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "12.1 - HOG descriptor"
      ],
      "metadata": {
        "id": "1SIKknpt8R26"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def calculate_gradients(image):\n",
        "    # Convert the image to grayscale if it's in RGB format\n",
        "    if len(image.shape) == 3:\n",
        "        grayscale_image = np.mean(image, axis=2)\n",
        "    else:\n",
        "        grayscale_image = image\n",
        "\n",
        "    # Calculate gradients in the x and y directions\n",
        "    dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
        "    dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
        "\n",
        "    # Calculate gradient magnitudes and orientations\n",
        "    magnitude = np.sqrt(dx**2 + dy**2)\n",
        "    orientation = np.degrees(np.arctan2(dy, dx))\n",
        "\n",
        "    return magnitude, orientation"
      ],
      "metadata": {
        "id": "2c8MZOSM38kJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def compute_histograms(amplitude, orientation, cell_size=8, num_bins=9):\n",
        "    num_cells_y, num_cells_x = amplitude.shape[0] // cell_size, amplitude.shape[1] // cell_size\n",
        "    histograms = np.zeros((num_cells_y, num_cells_x, num_bins))\n",
        "    bin_width = 180 / num_bins\n",
        "    bin_centers = np.arange(bin_width / 2, 180, bin_width)\n",
        "\n",
        "    # Iterate over each cell in the image\n",
        "    for y in range(num_cells_y):\n",
        "        for x in range(num_cells_x):\n",
        "            cell_amplitude = amplitude[y * cell_size: (y + 1) * cell_size, x * cell_size: (x + 1) * cell_size]\n",
        "            cell_orientation = orientation[y * cell_size: (y + 1) * cell_size, x * cell_size: (x + 1) * cell_size]\n",
        "\n",
        "            # Iterate over each pixel in the cell\n",
        "            for i in range(cell_size):\n",
        "                for j in range(cell_size):\n",
        "                    angle = cell_orientation[i, j]\n",
        "                    if angle < 0:\n",
        "                        angle += 180  # Handle negative angles by adding 180 degrees\n",
        "\n",
        "                    # Find the bin indices for the angle\n",
        "                    bin_index = int(angle // bin_width) % num_bins\n",
        "\n",
        "                    # Calculate the distances to the bin centers\n",
        "                    distance_1 = (bin_centers[bin_index] - angle) / bin_width\n",
        "                    distance_2 = (angle - bin_centers[(bin_index - 1) % num_bins]) / bin_width\n",
        "\n",
        "                    # Compute amplitude\n",
        "                    amp_1 = cell_amplitude[i, j] * distance_1\n",
        "                    amp_2 = cell_amplitude[i, j] * distance_2\n",
        "\n",
        "                    # Update the histogram using bilinear interpolation\n",
        "                    histograms[y, x, bin_index] += amp_1\n",
        "                    histograms[y, x, (bin_index - 1) % num_bins] += amp_2\n",
        "\n",
        "    return histograms"
      ],
      "metadata": {
        "id": "QagxmbpN38-c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def normalize_histograms(histogram):\n",
        "    YY, XX, num_bins = histogram.shape\n",
        "    e = math.pow(0.00001, 2)\n",
        "    F = []\n",
        "    for jj in range(0, YY-1):\n",
        "        for ii in range(0, XX-1):\n",
        "            H0 = histogram[jj, ii, :]\n",
        "            H1 = histogram[jj, ii+1, :]\n",
        "            H2 = histogram[jj+1, ii, :]\n",
        "            H3 = histogram[jj+1, ii+1, :]\n",
        "            H = np.concatenate((H0, H1, H2, H3))\n",
        "            n = np.linalg.norm(H)\n",
        "            Hn = H / np.sqrt(math.pow(n, 2) + e)\n",
        "            F = np.concatenate((F, Hn))\n",
        "    return F"
      ],
      "metadata": {
        "id": "APp79k7r39BB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def hog_des(image):\n",
        "  magnitude, orientation = calculate_gradients(image)\n",
        "  histograms = compute_histograms(magnitude, orientation)\n",
        "  F = normalize_histograms(histograms)\n",
        "  return F"
      ],
      "metadata": {
        "id": "z8qhIW2K39D_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "image = cv2.imread(f'/content/drive/My Drive/ZAW/pedestrians/pos/per00914.ppm', cv2.IMREAD_GRAYSCALE)\n",
        "F = hog_des(image)\n",
        "print(len(F)) #jeÅ›li tu jest wektor 3780 liczb to git"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FglQwZNg39GD",
        "outputId": "82123151-4a8a-486f-cb85-34cbbe03cee7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3780\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "12.2 - SVM classifier"
      ],
      "metadata": {
        "id": "E1ho2piV9oY8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Prepare the dataset\n",
        "HOG_data = np.zeros([2*100, 3781], np.float32)\n",
        "for i in range(0, 100):\n",
        "    IP = cv2.imread(f'/content/drive/MyDrive/ZAW/pedestrians/pos/per{str(i+1).rjust(5,\"0\")}.ppm', cv2.IMREAD_GRAYSCALE)\n",
        "    IN = cv2.imread(f'/content/drive/MyDrive/ZAW/pedestrians/neg/neg{str(i+1).rjust(5,\"0\")}.png', cv2.IMREAD_GRAYSCALE)\n",
        "\n",
        "    F = hog_des(IP)\n",
        "    HOG_data[i, 0] = 1\n",
        "    HOG_data[i, 1:] = F\n",
        "\n",
        "    F = hog_des(IN)\n",
        "    HOG_data[i+100, 0] = 0\n",
        "    HOG_data[i+100, 1:] = F\n",
        "\n",
        "#Separate labels and data\n",
        "labels = HOG_data[:,0]\n",
        "data = HOG_data[:,1:]\n",
        "\n",
        "d_test = data[:40]\n",
        "d_train = data[40:]\n",
        "l_test = labels[:40]\n",
        "l_train = labels[40:]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oTXf6a9Z9prr",
        "outputId": "c7b57c46-cf16-4da7-9e33-16182e7e3766"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Create and train the SVM classifier\n",
        "clf = svm.SVC(kernel='linear', C =1.0)\n",
        "clf.fit(d_train, l_train)\n",
        "lp = clf.predict(d_train)\n",
        "\n",
        "# Perform classification on the training set and compute confusion matrix\n",
        "train_predictions = clf.predict(data)\n",
        "confusion_mat = confusion_matrix(labels, train_predictions)\n",
        "TP, TN, FP, FN = confusion_mat[1, 1], confusion_mat[0, 0], confusion_mat[0, 1], confusion_mat[1, 0]\n",
        "\n",
        "# Print confusion matrix and accuracy\n",
        "print(\"Confusion Matrix:\")\n",
        "print(confusion_mat)\n",
        "accuracy = (TP + TN) / (TP + TN + FP + FN)\n",
        "print(\"Accuracy:\", accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fjKUUhtd-3Mc",
        "outputId": "7107c0be-434c-4649-f4dc-e34b925d4d8c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion Matrix:\n",
            "[[100   0]\n",
            " [  1  99]]\n",
            "Accuracy: 0.995\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Different C\n",
        "clf = svm.SVC(kernel='linear', C=0.001)\n",
        "clf.fit(data, labels)\n",
        "\n",
        "train_predictions = clf.predict(data)\n",
        "confusion_mat = confusion_matrix(labels, train_predictions)\n",
        "TP, TN, FP, FN = confusion_mat[1, 1], confusion_mat[0, 0], confusion_mat[0, 1], confusion_mat[1, 0]\n",
        "\n",
        "print(\"Confusion Matrix:\")\n",
        "print(confusion_mat)\n",
        "accuracy = (TP + TN) / (TP + TN + FP + FN)\n",
        "print(\"Accuracy:\", accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eoy838Te-3U2",
        "outputId": "bc86d096-4c4b-4d6a-a1f8-158c81ada19c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion Matrix:\n",
            "[[ 98   2]\n",
            " [  0 100]]\n",
            "Accuracy: 0.99\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Different kernel\n",
        "clf = svm.SVC(kernel='poly', C=0.1)\n",
        "clf.fit(data, labels)\n",
        "\n",
        "train_predictions = clf.predict(data)\n",
        "confusion_mat = confusion_matrix(labels, train_predictions)\n",
        "TP, TN, FP, FN = confusion_mat[1, 1], confusion_mat[0, 0], confusion_mat[0, 1], confusion_mat[1, 0]\n",
        "\n",
        "print(\"Confusion Matrix:\")\n",
        "print(confusion_mat)\n",
        "accuracy = (TP + TN) / (TP + TN + FP + FN)\n",
        "print(\"Accuracy:\", accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Evh-6qZq-3XN",
        "outputId": "d6123b08-127b-4cbd-ac5a-eeeba4351421"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion Matrix:\n",
            "[[100   0]\n",
            " [  3  97]]\n",
            "Accuracy: 0.985\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Test\n",
        "clf = svm.SVC(kernel='linear', C =1.0)\n",
        "clf.fit(d_train, l_train)\n",
        "lp = clf.predict(d_test)\n",
        "\n",
        "train_predictions = clf.predict(data)\n",
        "confusion_mat = confusion_matrix(labels, train_predictions)\n",
        "TP, TN, FP, FN = confusion_mat[1, 1], confusion_mat[0, 0], confusion_mat[0, 1], confusion_mat[1, 0]\n",
        "\n",
        "print(\"Confusion Matrix:\")\n",
        "print(confusion_mat)\n",
        "accuracy = (TP + TN) / (TP + TN + FP + FN)\n",
        "print(\"Accuracy:\", accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ejN8dJSZ-3Zs",
        "outputId": "0bbcc5a5-4aab-44a2-f7ae-40c7d27adf48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion Matrix:\n",
            "[[100   0]\n",
            " [  1  99]]\n",
            "Accuracy: 0.995\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "12.3 - People detection"
      ],
      "metadata": {
        "id": "ic_M_QWOB2BW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def resize(img):\n",
        "    scale_factor = 14/15\n",
        "    resized_image = cv2.resize(img, None, fx=scale_factor, fy=scale_factor)\n",
        "    return resized_image"
      ],
      "metadata": {
        "id": "SwrRPvvjK5F0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def detect(img):\n",
        "  image = resize(img)\n",
        "  window_size = (64, 128)\n",
        "  for y in range(0, image.shape[0] - window_size[1], 8):  #przesuniÄ™cie\n",
        "      for x in range(0, image.shape[1] - window_size[0], 16):\n",
        "          crop = image[y:y+win_size[1], x:x+window_size[0]]\n",
        "          hog_features = hog_des(crop)\n",
        "          prediction = clf.predict(hog_features.reshape(1, -1))\n",
        "          if prediction == 1:\n",
        "              cv2.rectangle(image, (x, y), (x+window_size[0], y+window_size[1]), (0, 255, 0), 2)\n",
        "\n",
        "  cv2_imshow(image)"
      ],
      "metadata": {
        "id": "Y9B2kxoJK5LP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "img = cv2.imread(f'/content/drive/My Drive/ZAW/Test/testImage4.png')\n",
        "detect(img)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "neLlXE8QLN0V",
        "outputId": "b935db4d-922e-4dda-8e2e-99da0cdc7023"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n",
            "<ipython-input-2-8e0354342792>:9: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dx = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=1)\n",
            "<ipython-input-2-8e0354342792>:10: DeprecationWarning: Please use `convolve1d` from the `scipy.ndimage` namespace, the `scipy.ndimage.filters` namespace is deprecated.\n",
            "  dy = scipy.ndimage.filters.convolve1d(np.int32(grayscale_image), np.array([-1, 0, 1]), axis=0)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=310x339 at 0x7F4FC72C84C0>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}